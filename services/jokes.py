# -*- coding: utf-8 -*-
# services/joke.py

from __future__ import annotations
import asyncio, random, html
from typing import List, Optional

from config import (
    OPENAI_API_KEY,
    GPT_JOKES_ON,

)
from db import db

# ---- –¥–µ—Ñ–æ–ª—Ç–∏  ----
try:
    from config import GPT_JOKES_MODEL
except Exception:
    GPT_JOKES_MODEL = "gpt-4o-mini"
try:
    from config import GPT_JOKES_TEMP
except Exception:
    GPT_JOKES_TEMP = 0.9
try:
    from config import GPT_JOKES_PROB
except Exception:
    GPT_JOKES_PROB = 0.6  #–π–º–æ–≤

# ---- –ª–æ–∫–∞–ª—å–Ω–∏–π –ø—É–ª ----
JOKES_PG13 = [
    "–°–≤—ñ—Ç–ª–æ –≤ –∫—ñ–Ω—Ü—ñ —Ç—É–Ω–µ–ª—é ‚Äî —Ç–æ –º–æ–Ω—ñ—Ç–æ—Ä —ñ–∑ –ø—Ä–æ–¥–æ–º. –ó–∞–∫—Ä–∏–π –Ω–æ—É—Ç.",
    "–ü–ª–∞–Ω –¥–Ω—è: 1) –∫–∞–≤–∞ 2) –ø–∞–Ω—ñ–∫–∞ 3) —ñ–º–ø—Ä–æ–≤—ñ–∑–∞—Ü—ñ—è.",
    "–ö–æ–ª–∏ CI —á–µ—Ä–≤–æ–Ω–∏–π ‚Äî —Å–ø–∏—Ç—å –ª–∏—à–µ —Å–æ–≤—ñ—Å—Ç—å.",
]
JOKES_R18 = [
    "–ú—ñ–π –≥—É–º–æ—Ä —á–æ—Ä–Ω—ñ—à–∏–π –∑–∞ –ª–æ–≥–∏ –ø—ñ—Å–ª—è —Ä–µ–ª—ñ–∑—É —É –ø‚Äô—è—Ç–Ω–∏—Ü—é.",
    "–ñ–∏—Ç—Ç—è –¥–∞–ª–æ –ª–∏–º–æ–Ω–∏ ‚Äî –∑—Ä–æ–±–∏ “ë–∞–Ω-–ø–∞–Ω—á —ñ –Ω–µ –ø—ñ–Ω–≥—É–π –º–µ–Ω–µ –¥–æ —Ä–∞–Ω–∫—É.",
]

# ---- —É—Ç–∏–ª—ñ—Ç–∏ ----
def _weighted_pool_from_db(sql: str, params: tuple = ()) -> List[str]:
    try:
        with db() as conn, conn.cursor() as cur:
            cur.execute(sql, params)
            rows = cur.fetchall()
    except Exception:
        rows = []
    pool: List[str] = []
    for r in rows:
        w = 1
        try:
            w = max(1, int(r.get("weight", 1)))
        except Exception:
            pass
        pool.extend([r["text"]] * w)
    return pool

# ---- –∑–≤–∏—á–∞–π–Ω–∏–π –∂–∞—Ä—Ç ----
def pick_joke(chat_id: int, mode: str) -> str:
    pool = _weighted_pool_from_db(
        "SELECT text, weight FROM jokes WHERE chat_id=%s OR chat_id IS NULL",
        (chat_id,),
    )
    pool.extend(JOKES_PG13 if (mode or "").lower() == "pg13" else JOKES_R18)
    return random.choice(pool) if pool else "(–ø–æ—Ä–æ–∂–Ω—ñ–π –ø—É–ª –∂–∞—Ä—Ç—ñ–≤)"

# ---- GPT-–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è (–Ω–µ –±–ª–æ–∫—É—î event loop) ----
async def gpt_joke(mode: str = "pg13") -> Optional[str]:
    if not (OPENAI_API_KEY and GPT_JOKES_ON):
        return None
    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)

        darkness = "–ª–µ–≥–∫–∏–π —á–æ—Ä–Ω–∏–π –≥—É–º–æ—Ä" if (mode or "").lower() == "pg13" else "—á–æ—Ä–Ω–∏–π –≥—É–º–æ—Ä, —ñ—Ä–æ–Ω—ñ—è, —Å–ª–µ–Ω–≥"
        sys = (
            "–¢–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Å—Ç–µ–Ω–¥–∞–ø-–∫–æ–º—ñ–∫. –ü–∏—à–∏ –û–î–ò–ù –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫–∏–π –¥–æ—Ç–µ–ø–Ω–∏–π –∂–∞—Ä—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, —É —Ñ–æ—Ä–º—ñ –æ–¥–Ω–æ—Ä—è–¥–∫–∞. "
            "–°—Ç–∏–ª—å: " + darkness + ". –ë–µ–∑ –¥–æ–≤–≥–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å, –±–µ–∑ —Ç–µ–≥—ñ–≤."
        )

        def _call():
            return client.chat.completions.create(
                model=GPT_JOKES_MODEL,
                messages=[
                    {"role": "system", "content": sys},
                    {"role": "user", "content": "–î–∞–π –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –∂–∞—Ä—Ç –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-—á–∞—Ç—É (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é)."},
                ],
                max_tokens=64,
                temperature=float(GPT_JOKES_TEMP),
            )

        resp = await asyncio.to_thread(_call)
        line = (resp.choices[0].message.content or "").strip()
        return html.escape(line) if line else None
    except Exception:
        return None

async def pick_joke_maybe_gpt(chat_id: int, mode: str) -> str:
    use_gpt = bool(GPT_JOKES_ON) and (random.random() < float(GPT_JOKES_PROB))
    if use_gpt:
        g = await gpt_joke(mode)
        if g:
            return g
    return pick_joke(chat_id, mode)

# ---- –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π ‚Äúroast‚Äù ----
def pick_personal_joke(chat_id: int, name: str) -> str:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥–∫–æ–ª –∑ —Ç–∞–±–ª–∏—Ü—ñ jokes_personal (—Ç–µ–∫—Å—Ç–∏ –∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º {name}).
    –Ø–∫—â–æ —Ç–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–µ–≤–µ–ª–∏–∫–∏–π –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π –ø—É–ª.
    """
    pool = _weighted_pool_from_db("SELECT text, weight FROM jokes_personal", ())
    if not pool:
        pool = [
            "—è–∫—â–æ {name} –∫–∞–∂–µ ¬´–≤—Å–µ –ø—ñ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º¬ª ‚Äî –≥–æ—Ç—É–π—Å—è –¥–æ –ø—Ä–æ–¥–∞–∫—à–Ω—É –≤ –ø º—è—Ç–Ω–∏—Ü—é",
            "{name}, —Ç–∏ —è–∫ Windows Update ‚Äî –∑–∞–≤–∂–¥–∏ –Ω–µ –≤—á–∞—Å–Ω–æ üôÉ",
            "{name}, —Ç–∏ —è–∫ SELECT * –±–µ–∑ WHERE ‚Äî —ñ –ø—Ä–∞—Ü—é—î—à, —ñ —Å—Ç—Ä–∞—à–Ω–æ",
            "{name}, staging —Ü–µ –Ω–µ –¥–ª—è —Å–ª–∞–±–∞–∫—ñ–≤ ‚Äî —Ü–µ –¥–ª—è —Ç–µ–±–µ",
            "{name}, —Ç–≤—ñ–π –∫–æ–¥ –ø–∞—Ö–Ω–µ —Ñ—ñ—á–µ—é –±–µ–∑ —Ç–µ—Å—Ç—ñ–≤ ‚Äî –≥–æ—Ç—É–π—Å—è –¥–æ —Ä–µ–≤ º—é",
        ]
    line = random.choice(pool)
    safe_name = html.escape(name or "—Ç–∏")
    return line.replace("{name}", safe_name)
