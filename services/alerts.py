# -*- coding: utf-8 -*-
# services/air_alerts.py
import asyncio
from typing import Tuple, Set, List
import aiohttp

from config import ALERTS_TOKEN, log
from db import db

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
KYIV_CITY = "–º. –ö–∏—ó–≤"
KYIV_REGION = "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"

API_BASE = "https://alerts.in.ua/api/"  # –±–∞–∑–æ–≤–∏–π URL API
POLL_SEC = 30                           # —ñ–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —É —Å–µ–∫—É–Ω–¥–∞—Ö
HTTP_TIMEOUT = aiohttp.ClientTimeout(total=15)

# ----------------------- DB switches -----------------------
def set_air_city(chat_id: int, on: bool):
    """–£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –º—ñ—Å—Ç–æ –ö–∏—ó–≤ –¥–ª—è —á–∞—Ç—É."""
    with db() as conn, conn.cursor() as cur:
        cur.execute(
            "UPDATE chats SET air_city_on=%s WHERE chat_id=%s",
            (1 if on else 0, chat_id)
        )

def set_air_region(chat_id: int, on: bool):
    """–£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ö–∏—ó–≤—Å—å–∫—É –æ–±–ª–∞—Å—Ç—å –¥–ª—è —á–∞—Ç—É."""
    with db() as conn, conn.cursor() as cur:
        cur.execute(
            "UPDATE chats SET air_region_on=%s WHERE chat_id=%s",
            (1 if on else 0, chat_id)
        )

def get_air_chats() -> Tuple[List[int], List[int]]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–∫–∏ —á–∞—Ç—ñ–≤, –ø—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö –Ω–∞ –º—ñ—Å—Ç–æ —Ç–∞ –æ–±–ª–∞—Å—Ç—å."""
    with db() as conn, conn.cursor() as cur:
        cur.execute("SELECT chat_id FROM chats WHERE air_city_on=1")
        city = [r["chat_id"] for r in cur.fetchall()]
        cur.execute("SELECT chat_id FROM chats WHERE air_region_on=1")
        region = [r["chat_id"] for r in cur.fetchall()]
    return city, region

# ----------------------- HTTP client -----------------------
async def _fetch_states(session: aiohttp.ClientSession) -> Tuple[Set[str], Set[str]]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –º–Ω–æ–∂–∏–Ω–∏ –Ω–∞–∑–≤:
      - cities_on  : –º—ñ—Å—Ç–∞, –¥–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞
      - regions_on : –æ–±–ª–∞—Å—Ç—ñ, –¥–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞
    –ü—Ä–∞—Ü—é—î –Ω–∞–ø—Ä—è–º—É –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–º API. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
      { "cities": [{"name": "...", "alert": true/false}, ...],
        "regions": [{"name": "...", "alert": true/false}, ...] }
    """
    url = API_BASE + "states"
    async with session.get(url) as r:
        if r.status == 401:
            raise RuntimeError("–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π API-–∫–ª—é—á (401).")
        r.raise_for_status()
        data = await r.json()

    def _names_on(items):
        out = set()
        for it in items or []:
            name = it.get("name") or it.get("title") or it.get("location_title")
            if name and bool(it.get("alert")):
                out.add(name)
        return out

    cities_on = _names_on(data.get("cities"))
    regions_on = _names_on(data.get("regions"))
    return cities_on, regions_on

# ----------------------- Public helpers -----------------------
async def air_status_text() -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è /status."""
    if not ALERTS_TOKEN:
        return "‚ö†Ô∏è API –∫–ª—é—á alerts.in.ua –Ω–µ –∑–∞–¥–∞–Ω–æ."

    headers = {"X-API-Key": ALERTS_TOKEN}
    try:
        async with aiohttp.ClientSession(headers=headers, timeout=HTTP_TIMEOUT) as s:
            cities, regions = await _fetch_states(s)
        parts = [
            "–ö–∏—ó–≤: " + ("üî¥ –¢–†–ò–í–û–ì–ê" if KYIV_CITY in cities else "üü¢ –í–Ü–î–ë–Ü–ô"),
            "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å: " + ("üî¥ –¢–†–ò–í–û–ì–ê" if KYIV_REGION in regions else "üü¢ –í–Ü–î–ë–Ü–ô"),
        ]
        return "\n".join(parts)
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}"

# ----------------------- Main loop -----------------------
async def air_alert_loop(bot):
    """
    –§–æ–Ω–æ–≤–∏–π —Ü–∏–∫–ª:
      - –∫–æ–∂–Ω—ñ POLL_SEC —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∏—Ç—É—î —Å—Ç–∞–Ω;
      - –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–∏—à–µ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞–Ω—É (on/off);
      - —Ç—Ä–∏–º–∞—î –æ–¥–Ω—É HTTP-—Å–µ—Å—ñ—é, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª—é—î—Ç—å—Å—è –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–æ–∫.
    """
    if not ALERTS_TOKEN:
        log.warning("ALERTS_TOKEN not set; air_alert_loop disabled.")
        return

    headers = {"X-API-Key": ALERTS_TOKEN}

    # –û—Å—Ç–∞–Ω–Ω—ñ–π –≤—ñ–¥–æ–º–∏–π —Å—Ç–∞–Ω (None = —â–µ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ ¬´–ø–µ—Ä—à–æ–≥–æ¬ª —Å–ø–∞–º—É)
    last_city: bool | None = None
    last_region: bool | None = None

    backoff = POLL_SEC  # –ø—Ä–æ—Å—Ç–∏–π –ª—ñ–Ω—ñ–π–Ω–∏–π ¬´–±–µ–∫–æ—Ñ¬ª –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö
    while True:
        try:
            async with aiohttp.ClientSession(headers=headers, timeout=HTTP_TIMEOUT) as session:
                cities, regions = await _fetch_states(session)

            now_city = KYIV_CITY in cities
            now_region = KYIV_REGION in regions

            city_chats, region_chats = get_air_chats()

            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ª–∏—à–µ –ø—Ä–∏ –∑–º—ñ–Ω—ñ
            if last_city is not None and now_city != last_city:
                text = "üî¥ –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –≤ –ö–∏—î–≤—ñ!" if now_city else "üü¢ –í—ñ–¥–±—ñ–π —É –ö–∏—î–≤—ñ."
                for cid in city_chats:
                    try:
                        await bot.send_message(cid, text)
                    except Exception as e:
                        log.warning(f"send city alert failed chat={cid}: {e}")

            if last_region is not None and now_region != last_region:
                text = "üî¥ –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –≤ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ!" if now_region else "üü¢ –í—ñ–¥–±—ñ–π —É –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ."
                for cid in region_chats:
                    try:
                        await bot.send_message(cid, text)
                    except Exception as e:
                        log.warning(f"send region alert failed chat={cid}: {e}")

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω–∏
            last_city = now_city
            last_region = now_region

            # –ø—Ä–∏ —É—Å–ø—ñ—Ö—É ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
            backoff = POLL_SEC
            await asyncio.sleep(POLL_SEC)

        except Exception as e:
            log.warning(f"air_alert_loop error: {e}")
            # –Ω–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
            await asyncio.sleep(min(max(backoff, 15), 120))
            backoff = min(backoff + 10, 120)
